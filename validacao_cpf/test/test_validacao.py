import unittest
from app.validacao import validar_cpf

class TestValidarCPF(unittest.TestCase):
    
    def test_cpf_valido(self):
        print("‚úî Testando CPFs v√°lidos")
        # Esses CPFs s√£o v√°lidos segundo o algoritmo de verifica√ß√£o
        self.assertTrue(validar_cpf("529.982.247-25"))
        self.assertTrue(validar_cpf("153.400.958-70"))
        self.assertTrue(validar_cpf("862.883.667-57"))

    def test_cpf_invalido_formato(self):
        print("‚úî Testando CPFs com formato inv√°lido")
        # CPFs com quantidade errada de d√≠gitos ou letras
        self.assertFalse(validar_cpf("1234567890"))      # Apenas 10 d√≠gitos
        self.assertFalse(validar_cpf("123.456.789"))     # Incompleto
        self.assertFalse(validar_cpf("abc.def.ghi-jk"))  # Letras

    def test_cpf_invalido_digitos(self):
        print("‚úî Testando CPFs com d√≠gitos inv√°lidos")
        # CPFs com todos os d√≠gitos repetidos ou que n√£o passam a valida√ß√£o
        self.assertFalse(validar_cpf("111.111.111-11"))
        self.assertFalse(validar_cpf("00000000000"))
        self.assertFalse(validar_cpf("708.251.780-30"))  # Esse parece v√°lido, mas n√£o √©

    def test_cpf_com_zeros_a_esquerda(self):
        print("‚úî Testando CPF com zeros √† esquerda")
        # CPFs iniciando com zero podem ser v√°lidos
        self.assertTrue(validar_cpf("012.345.678-90"))  # V√°lido de acordo com o algoritmo

    def test_cpf_string_vazia(self):
        print("‚úî Testando CPF como string vazia")
        self.assertFalse(validar_cpf(""))

    def test_cpf_none(self):
        print("‚úî Testando CPF como None")
        self.assertFalse(validar_cpf(None))

    def test_cpf_tipo_errado(self):
        print("‚úî Testando CPF com tipos inv√°lidos")
        self.assertFalse(validar_cpf(12345678909))  # Inteiro
        self.assertFalse(validar_cpf(['123.456.789-09']))  # Lista

    def test_cpf_com_espacos(self):
        print("‚úî Testando CPF com espa√ßos extras")
        self.assertTrue(validar_cpf(" 529.982.247-25 "))
        self.assertFalse(validar_cpf("   "))

    def test_cpf_com_caracteres_especiais(self):
        print("‚úî Testando CPF com caracteres especiais")
        self.assertFalse(validar_cpf("529.982@247*25"))

if __name__ == '__main__':
    print("üîç Iniciando testes de valida√ß√£o de CPF...\n")
    unittest.main()
